class a{static errorListeners=[];static addErrorListener(r){this.errorListeners.push(r)}static removeErrorListener(r){const e=this.errorListeners.indexOf(r);e>-1&&this.errorListeners.splice(e,1)}static handleError(r){console.error("Application Error:",{type:r.type,message:r.message,timestamp:r.timestamp,details:r.details}),this.logErrorToStorage(r);const e=this.getUserMessage(r);this.errorListeners.forEach(t=>{try{t(r)}catch(o){console.error("Error in error listener:",o)}}),this.showErrorToUser(e,r.type)}static getUserMessage(r){switch(r.type){case"NETWORK_ERROR":return"ネットワーク接続に問題があります。インターネット接続を確認してください。";case"DATA_LOAD_ERROR":return"問題データの読み込みに失敗しました。ページを再読み込みしてください。";case"SESSION_ERROR":return"セッションに問題が発生しました。新しいセッションを開始してください。";case"VALIDATION_ERROR":return"入力データに問題があります。もう一度お試しください。";case"COMPONENT_ERROR":return"アプリケーションでエラーが発生しました。ページを再読み込みしてください。";default:return"予期しないエラーが発生しました。ページを再読み込みしてください。"}}static showErrorToUser(r,e){const t=new CustomEvent("app-error",{detail:{message:r,type:e}});window.dispatchEvent(t)}static logErrorToStorage(r){try{const e={...r,timestamp:r.timestamp.toISOString(),userAgent:navigator.userAgent,url:window.location.href},t=this.getErrorLogs();t.push(e);const o=t.slice(-10);localStorage.setItem("app_error_logs",JSON.stringify(o))}catch(e){console.warn("Failed to log error to storage:",e)}}static getErrorLogs(){try{const r=localStorage.getItem("app_error_logs");return r?JSON.parse(r):[]}catch(r){return console.warn("Failed to retrieve error logs:",r),[]}}static clearErrorLogs(){try{localStorage.removeItem("app_error_logs")}catch(r){console.warn("Failed to clear error logs:",r)}}static createAppError(r,e,t){return{type:r,message:e,details:t,timestamp:new Date}}static handleNetworkError(r){const e=this.createAppError("NETWORK_ERROR","Network request failed",r);this.handleError(e)}static handleDataLoadError(r){const e=this.createAppError("DATA_LOAD_ERROR","Failed to load application data",r);this.handleError(e)}static handleSessionError(r){const e=this.createAppError("SESSION_ERROR","Session management error",r);this.handleError(e)}static handleValidationError(r){const e=this.createAppError("VALIDATION_ERROR","Data validation failed",r);this.handleError(e)}static handleComponentError(r,e){const t=this.createAppError("COMPONENT_ERROR","React component error",{error:r,errorInfo:e});this.handleError(t)}}export{a as E};
